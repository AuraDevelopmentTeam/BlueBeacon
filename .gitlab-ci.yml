# Enable Static Application Security Testing (SAST)
sast:
  stage: test
  needs: [ ]
include:
  - template: Jobs/SAST.gitlab-ci.yml

# Normal Pipeline
stages:
  - lint
  - test
  - build

default:
  tags:
    - docker

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  PYTHONPATH: "$CI_PROJECT_DIR"

# Common setup for all jobs
.setup-python:
  image: python:3.13
  before_script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -Ue ".[dev]"
  # Cache dependencies between jobs
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .pip-cache/
      - .venv/

# Linting jobs
black:
  stage: lint
  extends: .setup-python
  script:
    - black --check --diff --color src/ test/
  allow_failure: true
  needs: [ ]

isort:
  stage: lint
  extends: .setup-python
  script:
    - isort --check --diff --color src/ test/
  allow_failure: true
  needs: [ ]

mypy:
  stage: lint
  extends: .setup-python
  script:
    - set -o pipefail
    - mypy src/ test/ --output=json | mypy-gitlab-code-quality > codequality.json
  allow_failure: true
  artifacts:
    reports:
      codequality: codequality.json
  needs: [ ]

# Test job
pytest:
  stage: test
  extends: .setup-python
  script:
    - pytest --cov=src/bluebeacon --cov-report=xml:coverage.xml --cov-report=term --junitxml=junit.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
  needs:
    - black
    - isort
    - mypy

# Docker jobs
build:create-cache:
  stage: build
  script:
    # Hydrate the build cache. This step can take a long time. Having it in a separate job allows us to indirectly cache
    # it. The consequent build jobs will use the cache and be much faster.
    - docker build --target builder .
  needs:
    - pytest

.docker-build:
  stage: build
  variables:
    DOCKER_VERSION: 27
    DOCKER_HOST: unix:///var/run/docker.sock
  image: docker:${DOCKER_VERSION}
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - docker build --build-arg BASE_IMAGE="$BASE_IMAGE" -t "$FULL_IMAGE_TAG" .
    - docker push "$FULL_IMAGE_TAG"
  needs:
    - build:create-cache
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        FULL_IMAGE_TAG: '$CI_REGISTRY_IMAGE:$IMAGE_TAG'
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      variables:
        FULL_IMAGE_TAG: '$CI_REGISTRY_IMAGE:${IMAGE_TAG}-${CI_COMMIT_REF_SLUG}'

build:java-matrix:
  extends: .docker-build
  variables:
    BASE_IMAGE: "ghcr.io/pterodactyl/yolks:${IMAGE_TAG}"
  parallel:
    matrix:
      - IMAGE_TAG: "java_8"
      - IMAGE_TAG: "java_8j9"
      - IMAGE_TAG: "java_11"
      - IMAGE_TAG: "java_11j9"
      - IMAGE_TAG: "java_16"
      - IMAGE_TAG: "java_16j9"
      - IMAGE_TAG: "java_17"
      - IMAGE_TAG: "java_17j9"
      - IMAGE_TAG: "java_19"
      - IMAGE_TAG: "java_19j9"
      - IMAGE_TAG: "java_21"
